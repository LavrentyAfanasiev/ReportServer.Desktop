using System;
using ReportServer.Desktop.Entities;
using ReportServer.Desktop.Views.WpfResources;
using MahApps.Metro.Controls;
using System.Windows.Interactivity;

UserControl "ReportServer.Desktop.Views.WpfResources.TaskListView" {
  "xmlns:sys": "clr-namespace:System;assembly=mscorlib"
  Resources:  ResourceDictionary {
    MergedDictionaries: [
      ResourceDictionary {
        Source: "TemplatesDictionary.g.xaml"
      }
    ]
    CollectionViewSource Key="TasksView" {
      Source: "{Binding Path=Tasks}"
      GroupDescriptions: PropertyGroupDescription { PropertyName: "GroupName" }
    }
  }
  Grid {
    RowDefinitions: [
      RowDefinition {Height: "40"}
      RowDefinition {}
    ]
    Grid {
      Grid.ColumnSpan: "4"
	  Background: 	"#F5F5F5"
      ColumnDefinitions: [
        ColumnDefinition {Width: "Auto"}
		ColumnDefinition {Width: "Auto"}
		ColumnDefinition {Width: "Auto"}
		ColumnDefinition {Width: "Auto"}
        ColumnDefinition {}
      ]
      Label {
        Grid.Column: "4"
        Content: "Current tasks list"
        Margin: "2 2 0 2"
      }
      Button {
      Visibility: bind Shell.Role
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
        Padding: "5"
        Command: bind Shell.CreateTaskCommand
        "Add new task"
      }
	   Button {
      Visibility: bind Shell.Role
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
		Grid.Column: "1"
        Padding: "5"
        Command: bind CopyTaskCommand
        "Copy selected task"
      }

	  Label {
        Grid.Column: "2"
        Content: "Expand all groups"
        Margin: "2 2 0 2"
      }
	    ToggleSwitchButton {
		Grid.Column: "3"
        Padding: "3"
		IsChecked: bind DataContext.AllGroupsExpanded from $ancestor<UserControl>set [
				UpdateSourceTrigger:PropertyChanged]    
		
      }
    }
    DataGrid {  
      Grid.Row: "1"
      #DataGridMix(bind from $resource TasksView, bind SelectedTask)
      RowHeight: "{x:Static sys:Double.NaN}"
      InputBindings: [
        MouseBinding {
          MouseAction: "LeftDoubleClick"
          Command: bind EditTaskCommand
        }
        KeyBinding {
          Key: "Delete"
          Command: "ApplicationCommands.NotACommand"
        }
      ]
	
      Columns: [
	
        DataGridTextColumn { 
        HeaderStyle: Style{
        BasedOn:  "{StaticResource MyColumnHeader}"
          TargetType: DataGridColumnHeader		  
		  Setter {
			Property: "HorizontalContentAlignment"
			Value: "Right"
		 }
        }
        HeaderTemplate: DataTemplate{ 	
		
		StackPanel {
		 Orientation: Horizontal
		 HorizontalAlignment: Right
			TextBlock { "Id" 
			Margin: "2 0 20 0"
			}
		TextBox
			{TextWrapping: NoWrap
				Background: "White"
				HorizontalAlignment: Stretch
				//HorizontalScrollBarVisibility: Auto
				AcceptsReturn: "False"
				TextAlignment: "Left"
	
			Text: bind DataContext.TaskIdSearchString from $ancestor<UserControl> set[UpdateSourceTrigger: "PropertyChanged"
					ValidatesOnDataErrors: "True"]	
					
		 Interaction.Behaviors: TextBoxInputBehavior {
					InputMode: NullableDigitInput}

			HorizontalAlignment: Right
			Width: 90
			FontWeight: Normal
				  BorderThickness: 0
				  Padding: "1 0 1 3"
				TextBoxHelper.Watermark: "Search"
				TextBoxHelper.ClearTextButton: true}
			}
		}   		
	   MinWidth: 150
       Width: "0.25*"
       Binding: bind Id
	 }	
		  	
		DataGridTextColumn {
		 HeaderStyle: Style{
        BasedOn:  "{StaticResource MyColumnHeader}"
          TargetType: DataGridColumnHeader		  
		  Setter {
			Property: "HorizontalContentAlignment"
			Value: "Right"
		 }
        }
        HeaderTemplate: DataTemplate{ 
        Grid { 
         ColumnDefinitions: [
        ColumnDefinition {Width: "*"}
		ColumnDefinition {Width: "Auto"}  ]


		 StackPanel {		
		 Orientation: Horizontal
		 HorizontalAlignment: Stretch		

		TextBlock { "Name" 
			TextAlignment: Center
			Margin: "2 0 20 0"
			}
		TextBox
			{
			 Grid.Column: 1
			TextWrapping: NoWrap
				Background: "White"
				HorizontalAlignment: Stretch
				//HorizontalScrollBarVisibility: Auto
				AcceptsReturn: "False"
				TextAlignment: "Left"

			Text: bind DataContext.TaskNameSearchString from $ancestor<UserControl> set[UpdateSourceTrigger: "PropertyChanged"
					ValidatesOnDataErrors: "True"]			
			HorizontalAlignment: Right
			Width: 150
			FontWeight: Normal
				  BorderThickness: 0
				  Padding: "1 0 1 3"
				TextBoxHelper.Watermark: "Search"
				TextBoxHelper.ClearTextButton: true}
			}
		}   
		}
		  MinWidth: 250
          Width: "0.6*"
          Binding: bind Name
        }
        DataGridTextColumn {
          Header: "Schedule"
          Width: "0.35*"
          Binding: bind Schedule
        }
        DataGridTextColumn {
          Header: "Operations"
          Binding: bind Operations
          ElementStyle: Style {
            Setter {
              Property: "TextBlock.TextWrapping"
              Value: "Wrap"
            }
          }
        }
      ]
      GroupStyle: GroupStyle {
        ContainerStyle: Style {
          TargetType: GroupItem		
          Setter { Property: "Margin",  Value: "0,0,0,3" }
          Setter {
            Property: "Template"
            Value: ControlTemplate {
              TargetType: GroupItem
              Expander {              
                IsExpanded: bind DataContext.AllGroupsExpanded from $ancestor<UserControl>  set [
				UpdateSourceTrigger:Explicit
				Mode: TwoWay]
                Background: resource dyn "AccentColorBrush"
                BorderBrush: resource dyn "AccentColorBrush3"
                Foreground: resource dyn "BlackBrush"
                BorderThickness: "1,1,1,1"
                Header: DockPanel {
                  TextBlock {
                    HorizontalAlignment: "Left"
                    FontWeight: "Bold"
                    Text: bind Name
                    Margin: "5,0,0,0"
                  }
                  TextBlock {
                    HorizontalAlignment: "Left"
                    FontWeight: "Bold"
                    Text: bind ItemCount set [ StringFormat: "(Count: {0})" ]
                    Margin: "5,0,0,0"
                  }
                }
                Content: ItemsPresenter { }
              }
            }
          }
        }
      }
    }
  }
}