using MahApps.Metro.Controls.Dialogs;
using GongSolutions.Wpf.DragDrop;
using Xceed.Wpf.Toolkit;
using ReportServer.Desktop.Views.WpfResources;
using MahApps.Metro.IconPacks;
using MahApps.Metro.Controls;
using ReportServer.Desktop.Entities;

UserControl
"ReportServer.Desktop.Views.TaskEditorView" {

  Resources: ResourceDictionary { Source: "WpfResources/TemplatesDictionary.g.xaml" }
 "xmlns:dd": "clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
  ScrollViewer {VerticalScrollBarVisibility: "Auto"
    HorizontalScrollBarVisibility: "Auto"

	Grid { 	ColumnDefinitions: [
			ColumnDefinition { Width: "0.9*" }
			ColumnDefinition { Width: "auto" }
			 ColumnDefinition {}]

		Grid { Grid.Column: 0
		  RowDefinitions: [
			RowDefinition { Height: "Auto" }
			RowDefinition { Height: "Auto" }
			RowDefinition { Height: "Auto" }
			RowDefinition { Height: "Auto" }
			RowDefinition { Height: "Auto" }
			RowDefinition { Height: "Auto" }
			RowDefinition { Height: "Auto" }
			RowDefinition {}
		  ]

		  ColumnDefinitions: [
			ColumnDefinition { }
			ColumnDefinition { Width: "Auto" }
		  ]
	  
		 Grid {
			Margin: "2 2 2 10"
			Background: 	"#F5F5F5"
			ColumnDefinitions: [
			  ColumnDefinition { Width: "Auto" }
			  ColumnDefinition { }
			]

			Button {HorizontalAlignment: "Right"
			  Command: bind OpenCurrentTaskViewCommand
			  Visibility: MultiBinding {
			  	Converter: "{StaticResource TaskIdAndRoleToVisMultiConverter}"
				Bindings: [
				bind Shell.Role
				 bind Id]
			  }
			  Padding: "5"
			  "Get new instance"
			}

			@ViewLabel("Task data")
			{Grid.Column: "1"}

		  }

		 Grid {
		 IsEnabled:  bind Shell.Role
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? true
			 : false
			Grid.Row: "1"
			RowDefinitions: [
			  RowDefinition { Height: "Auto" }
			  RowDefinition { Height: "Auto" }
			]
			ColumnDefinitions: [
			  ColumnDefinition { Width: "Auto" }
			  ColumnDefinition { Width: "Auto" }
			]

			@ContentLabel("Name","0","0","28 0 0 0")

			Border {
			  Grid.Column: "1"
			  Width: "250"
			  HorizontalAlignment: "Left"
			  Margin: "3"
			  @InputTextBox("Name"){}
			}

			Grid {
			  Margin: "3"
			  Grid.Row: "1"
			  ColumnDefinitions: [
				ColumnDefinition { Width: "Auto" }
				ColumnDefinition { Width: "Auto" }
			  ]

			  CheckBox { IsChecked: bind HasSchedule }
			  @ContentLabel("Schedule","0","1","0")
			}

			ComboBox {
			  Grid.Column: "1"
			  Grid.Row: "1"
			  Width: "300"
			  Margin: "3"
			  IsEnabled: bind HasSchedule
			  ItemsSource: bind Schedules set [
			  UpdateSourceTrigger: PropertyChanged
			  ValidatesOnDataErrors: true]
			  SelectedValuePath: "Id"
			  DisplayMemberPath: "Name"
			  SelectedValue: bind ScheduleId set [UpdateSourceTrigger: PropertyChanged]
			}
		  }

		  Grid { Margin: "0 15 0 0"
		   Grid.Row: "2"
		   
		   ColumnDefinitions: [
			  ColumnDefinition { Width: "*" }
			  ColumnDefinition { Width: "Auto" }
			]
		   @ViewLabel("Parameters")
		      Button {HorizontalAlignment: Right
			  Command: bind AddParameterCommand
			   Visibility:  bind Shell.Role
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
			  Grid.Column: 1
			  "Add parameter"}
		   		}
			
			ListView { BorderThickness: 0
			Grid.Row: 3
			IsEnabled:   bind Shell.Role
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? true
			 : false
			HorizontalAlignment: Stretch
			MaxHeight: 350
			Width: "Auto"
			Focusable: false
			ScrollViewer.CanContentScroll: true
			ItemsSource: bind TaskParameters set[UpdateSourceTrigger: PropertyChanged
			ValidatesOnDataErrors: true]
			ItemTemplate: DataTemplate {
			
			  Border {
				BorderThickness: "1"
				BorderBrush: "#F5F5F5"
				Grid {
				  Height: "auto"
				  ColumnDefinitions: [
			        ColumnDefinition { Width: Auto}
					ColumnDefinition { }
					ColumnDefinition { Width: Auto}
					ColumnDefinition { Width: Auto}
					ColumnDefinition {}
					ColumnDefinition { Width: Auto }
				  ]

				  TextBlock {
					Background: "White"
					Margin: "10 0 5 0"
					Text: "Parameter name"}

				 Border {
				 MaxWidth: 305
				 Grid.Column: 1
				BorderThickness: "1"
				BorderBrush: "#F5F5F5"
			@InputTextBox("Name")
			{
			BorderThickness: 0
		    TextBoxHelper.Watermark: "Enter parameter name starting with @RepPar"
		    HorizontalAlignment: "Stretch"}
			}
				 
				 Button { 
				  Visibility:  bind "DataContext.Shell.Role" from $ancestor<ListView>  
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
				 Command: bind DataContext.ClipBoardFillCommand from $ancestor<ListView>  
				 CommandParameter: bind Name
				 Content: PackIconMaterial { Kind: "ContentCopy" } 
				 Grid.Column:2 }

				 TextBlock {
				 Margin: "10 0 5 0"
					Padding: "5"
					Grid.Column: "3"
					Text: "Parameter value"
				  }

				  Border {Grid.Column: 4
				BorderThickness: "1"
				MaxWidth: 305
				BorderBrush: "#F5F5F5"
				  @InputTextBox("Value")
			{
			MaxWidth: 305
			BorderThickness: 0
		    TextBoxHelper.Watermark: "Enter parameter value"}
			}

			 Button {
			  Visibility:  bind "DataContext.Shell.Role" from $ancestor<ListView>  
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
					Grid.Column: "5"
					Command: bind DataContext.RemoveParameterCommand from $ancestor<ListView> 
					CommandParameter: bind
					Content: PackIconMaterial { Kind: "CloseOctagon" }  
					Width: "40"
					Margin: "2"
				  }
				}
			  }
			}
			}

		  Grid { Margin: "0 15 0 0"
		   Grid.Row: "4"
		   
		   ColumnDefinitions: [
			  ColumnDefinition { Width: "*" }
			  ColumnDefinition { Width: "Auto" }
			  ColumnDefinition { Width: "Auto" }
			]
		   @ViewLabel("Operations")

		   Button {HorizontalAlignment: "Right"
		    Visibility:  bind Shell.Role
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
			  Command: bind OpenTemplatesListCommand
			  Grid.Column: 1
			  "Add from existing"
			  Grid.Row: "2"}

			   Button {
			    Visibility:  bind Shell.Role
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
			   Grid.Column: 2
			  Command: bind CreateOperConfigCommand
			  "Add new config"
			  Grid.Row: "2"
			}
			}

		 ListView {
			BorderThickness: "0"
			Grid.Row: "5"
			"dd:DragDrop.IsDragSource": "True"
			"dd:DragDrop.IsDropTarget": "True"
			"dd:DragDrop.UseDefaultEffectDataTemplate": "True"
			HorizontalAlignment: "Stretch"
			MaxHeight: "350"

			 
			ScrollViewer.CanContentScroll: "True"
			ItemsSource: bind BindedOpers set[UpdateSourceTrigger: PropertyChanged]
			ItemTemplate: DataTemplate {
			
			  Border {
				BorderThickness: "1"
				BorderBrush: "#F5F5F5"
				Grid {  
				  Height: "auto"
				  ColumnDefinitions: [
					ColumnDefinition { Width: "Auto" }
					ColumnDefinition { Width: "Auto" }
					ColumnDefinition { }
					ColumnDefinition { Width: "Auto" }
					ColumnDefinition { Width: "Auto" }
				  ]
				  TextBlock {
				     Visibility:  bind "DataContext.Shell.Role" from $ancestor<ListView>  
			 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
					Background: "White"
					Margin: "10 0 0 0"
					Text: "Use as default"
				  }
				  CheckBox {
				   Visibility:  bind "DataContext.Shell.Role" from $ancestor<ListView>  
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
				  Grid.Column: "1",  IsChecked: bind IsDefault }
				  TextBlock {
					Padding: "5"
					Grid.Column: "2"
					Text: "{Binding Path=Name, UpdateSourceTrigger=PropertyChanged}"
					
			InputBindings: [
							MouseBinding {
							  MouseAction: "LeftDoubleClick"
							  Command: bind DataContext.SelectOperationCommand from $ancestor<ListView>
								CommandParameter: bind
							}]
				  }
				  Button {
				    Visibility:  bind "DataContext.Shell.Role" from $ancestor<ListView>  
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
					Grid.Column: "3"
					Content:  PackIconModern { Kind:"CursorHand"}
					Width: "40"
					Margin: "2"
				  }
				  Button {
				  Visibility:  bind "DataContext.Shell.Role" from $ancestor<ListView>  
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
					Grid.Column: "4"
					Command: bind DataContext.RemoveOperationCommand from $ancestor<ListView>
					CommandParameter: bind
					Content: PackIconMaterial { Kind: "CloseOctagon" }  
					Width: "40"
					Margin: "2"
				  }
				}
			  }
			}
		  }
		  
		 Grid {
			Grid.Row: "6"
			Margin: "0 0 0 50"
			ColumnDefinitions: [
			  ColumnDefinition { }
			  ColumnDefinition { Width: "0.4*" }
			]
			StackPanel {
			  Grid.Column: "1"
			  Orientation: "Horizontal"
			  Button {
			   Visibility:  bind Shell.Role
		 convert (ServiceUserRole type) => type==ServiceUserRole.Editor? Visibility.Visible
			 : Visibility.Collapsed 
				Command: bind SaveChangesCommand
				"Save"
				Width: 100
			  }
			  Button {
				Command: bind CancelCommand
				"Cancel"
				Width: 100
			  }
			}
		  }
  
}		
	     GridSplitter {
        Grid.Column: "1"
        HorizontalAlignment: "Center"
        Width: "3"
        ShowsPreview: "False"
        VerticalAlignment: "Stretch"
      }
      
	  Grid { Grid.Column: 2
	  Visibility: "{Binding SelectedOperationConfig,Converter={StaticResource NullToVisibility}}"
	    RowDefinitions: [
			RowDefinition {Height: "Auto"}
			RowDefinition {Height: "Auto"}
			RowDefinition {Height: "Auto"}
			RowDefinition {Height: "Auto"}
		  ]

	Grid {
        RowDefinitions: [
          RowDefinition {Height: "Auto"}
          RowDefinition {Height: "Auto"}
          RowDefinition {Height: "Auto"}
		  RowDefinition {Height: "Auto"}
        ]
        ColumnDefinitions: [
          ColumnDefinition {Width: "Auto"}
          ColumnDefinition {Width: "Auto"}
        ]
		    Visibility: bind Type
			 convert (string type) => string.IsNullOrEmpty(type) ? Visibility.Collapsed 
			 : Visibility.Visible
		
     @ContentLabel("Mode") 

        ComboBox {
          Grid.Column: "1"
          Margin: "3"
          Width: "250"
          HorizontalAlignment: "Left"
          ItemsSource:  bind  from  $resource OperModeEnum
          SelectedValue: bind Mode
        }

		@ContentLabel("Type","1") 

        ComboBox {
          Background: "White"
          Grid.Column: "1"
          Grid.Row: "1"
          Margin: "3"
          Width: "250"
          HorizontalAlignment: "Left"
          SelectedItem: bind Type
          ItemsSource: bind ImplementationTypes
        }

      }
	  Grid {
			Grid.Row: "1"
			ColumnDefinitions: [
			  ColumnDefinition { Width: "Auto" }
			  ColumnDefinition { Width: "Auto" }
			]
			
	  	@ContentLabel("Name","1") 

		@InputTextBox("SelectedOperationName") 
		{ Grid.Column: "1"
          Grid.Row: "1"
          Margin: "3"
		  HorizontalAlignment: "Left"
          Width: "250"
        }
			}

	  Button {
	  Command: bind AddOperationCommand
	  IsEnabled: bind SelectedOperationName
	  convert (string name) => string.IsNullOrEmpty(name) ? false
	  :true
	  	Grid.Row: 3
		"Add"}
		
	 PropertyGrid.PropertyGrid {
	    BorderThickness: 0
		 Grid.Row: 2
		UpdateTextBoxSourceOnEnterKey: true
        ShowSearchBox: false
        HorizontalAlignment: Left
		VerticalAlignment: Top
        ShowSortOptions: false
        Width: 800
		MaxHeight: 750
        Margin: "2 2 2 10"
        ShowSummary: false
        Background: "#F5F5F5"
		ShowDescriptionByTooltip: true
      //  SelectedObjectName: bind Type set [StringFormat: "({0})"]
        SelectedObjectTypeName: bind SelectedOperation.ImplementationType
        SelectedObject: bind SelectedOperationConfig set[
		UpdateSourceTrigger: PropertyChanged]
      }
	  }
  }
 }
}